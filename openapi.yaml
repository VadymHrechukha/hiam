openapi: 3.0.2
info:
  title: HIAM Authorization Server API
  description: |
    Identity and Access Management server providing OAuth2, multi-factor authentication and more.<br>
    Implementation of [OAuth 2.0](https://tools.ietf.org/html/rfc6749)
  version: 0.1.0

servers:
  - url: https://hiam.hipanel.com/
    description: main development server

paths:
  /oauth/authorize:
    get:
      tags:
        - oauth2
      summary: Authorization code request
      description: OAuth2 standard
      parameters:
        - name: response_type
          in: query
          required: true
          schema:
            type: string
            enum:
              - code
        - name: client_id
          in: query
          required: true
          schema:
            type: string
        - name: redirect_uri
          in: query
          required: true
          schema:
            type: string
        - name: scope
          in: query
          schema:
            type: string
        - name: state
          in: query
          schema:
            type: string
        - name: user_id
          description: |
            ID of user, authorization code should be issued for.
            This parameter will be used only if current authenticated user is allowed to impersonate other users.
          in: query
          schema:
            type: string
      responses:
        302:
          description: Redirect back to application with authorization code

  /oauth/token:
    post:
      summary: Access Token Request
      tags:
        - oauth2
      description: |
        Partner makes a request to the token endpoint by adding the
        following parameters describerd  below
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                grant_type:
                  type: string
                  description: Supports all standard OAuth2 grant types
                  enum:
                    - authorization_code
                    - client_credentials
                    - refresh_token
                    - password
                    - implicit
      responses:
        200:
          description: Authorisation token (Bearer)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
              example: |-
                {
                   "access_token":"2YotnFZFEjr1zCsicMWpAA",
                   "token_type":"Bearer",
                   "expires_in":3600,
                }
        400:
          description: As per RFC authorisation server responds with 400 in case of error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example: |-
                {
                  "error":"invalid_request"
                }
      security:
        - Basic: []

  /oauth/revoke:
    post:
      tags:
        - oauth2
      summary: Invalidate Access Token
      description: According to the https://tools.ietf.org/html/rfc7009#section-2.1
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
                  description: The token that the client wants to get revoked.
                token_type_hint:
                  type: string
                  description: |
                    A hint about the type of the token submitted for revocation.
                    Clients MAY pass this parameter in order to help the authorization
                    server to optimize the token lookup.
                  enum:
                    - access_token
                    - refresh_token
      responses:
        200:
          description: Empty body with 200 code
      security:
        - OAuth2: []

  /userinfo:
    get:
      summary: User Info Request
      description: Get user information
      security:
        - bearerAuth: []
      responses:
        '200':
          description: JSON with user info according to available scope
        '403':
          description: Provided invalid token 

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  schemas:
    Token:
      type: object
      properties:
        access_token:
          type: string
          description: The access token value
        token_type:
          type: string
          enum:
            - Bearer
          description: Type of the token is set to "Bearer"
        expires_in:
          type: integer
          format: int32
          description: The lifetime in seconds of the access token
    Error:
      type: object
      properties:
        error:
          type: string
          enum:
            - invalid_request
            - invalid_client
            - invalid_grant
            - unauthorized_client
            - unsupported_grant_type
        error_description:
          type: string
          description: Human-readable text providing additional information
        error_uri:
          type: string
          description: A URI identifying a human-readable web page with
           information about the error
